/// DO NOT EDIT - This file was auto-generated by CleanseGen/main.swift
extension AssistedInjectionBuilder {

/// 1-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get()
            ))
        })
}

/// 2-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get()
            ))
        })
}

/// 3-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get()
            ))
        })
}

/// 4-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get()
            ))
        })
}

/// 5-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get()
            ))
        })
}

/// 6-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get()
            ))
        })
}

/// 7-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get()
            ))
        })
}

/// 8-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get()
            ))
        })
}

/// 9-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get()
            ))
        })
}

/// 10-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get()
            ))
        })
}

/// 11-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get()
            ))
        })
}

/// 12-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get()
            ))
        })
}

/// 13-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get()
            ))
        })
}

/// 14-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get()
            ))
        })
}

/// 15-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get()
            ))
        })
}

/// 16-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get()
            ))
        })
}

/// 17-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get()
            ))
        })
}

/// 18-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get()
            ))
        })
}

/// 19-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get()
            ))
        })
}

/// 20-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get()
            ))
        })
}

/// 21-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get()
            ))
        })
}

/// 22-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get()
            ))
        })
}

/// 23-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get()
            ))
        })
}

/// 24-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get()
            ))
        })
}

/// 25-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get()
            ))
        })
}

/// 26-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get()
            ))
        })
}

/// 27-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get()
            ))
        })
}

/// 28-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get(),
                provider28.get()
            ))
        })
}

/// 29-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((Assisted<Tag.Seed>, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                Assisted<Tag.Seed> { seed },
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get(),
                provider28.get(),
                provider29.get()
            ))
        })
}

/// 1-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 2-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 3-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 4-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 5-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 6-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 7-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 8-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 9-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 10-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 11-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 12-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 13-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 14-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 15-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 16-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 17-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 18-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 19-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 20-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 21-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 22-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 23-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 24-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 25-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 26-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 27-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 28-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get(),
                provider28.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

/// 29-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, Assisted<Tag.Seed>)) -> Element)  -> BindingReceipt<Factory<Tag>> {
    let binder = self.binder
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: Factory<Tag>.self)

    return binder
        .bind(Factory<Tag>.self)
        .to(value: Factory<Tag> { seed in
            return factory((
                provider1.get(),
                provider2.get(),
                provider3.get(),
                provider4.get(),
                provider5.get(),
                provider6.get(),
                provider7.get(),
                provider8.get(),
                provider9.get(),
                provider10.get(),
                provider11.get(),
                provider12.get(),
                provider13.get(),
                provider14.get(),
                provider15.get(),
                provider16.get(),
                provider17.get(),
                provider18.get(),
                provider19.get(),
                provider20.get(),
                provider21.get(),
                provider22.get(),
                provider23.get(),
                provider24.get(),
                provider25.get(),
                provider26.get(),
                provider27.get(),
                provider28.get(),
                provider29.get(),
                Assisted<Tag.Seed> { seed }
            ))
        })
}

}

